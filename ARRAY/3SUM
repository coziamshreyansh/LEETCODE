/// 104 ms
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> triplet;
        sort(nums.begin(),nums.end());
        
        int size = nums.size();
        if(size <= 2)
        {
            
            return triplet;
            
        }
        int left, right;
        for(int i = 0; i < size; i++)
        {
            if(i>0 && (nums[i]==nums[i-1]) )
                continue;
            left = i+1;
            right = size-1;
            while(left < right)
            {
                if(nums[i] + nums[left] + nums[right] == 0)
                { 
                    triplet.push_back(vector<int>{nums[i],nums[left],nums[right]});
                    while(left<right && nums[left]==nums[left+1])left++;
                    while(left<right && nums[right]==nums[right-1]) right--;
                    left++; 
                    right--;
                }
                else if(nums[i] + nums[left] + nums[right] < 0)
                {
                    left ++;
                }
                else
                {
                    right--;
                }
            }
        }
        return triplet;
    }
};
